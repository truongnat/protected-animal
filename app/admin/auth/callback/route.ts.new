import { createServerSupabaseClient } from '@/lib/supabase-server';
import { NextRequest, NextResponse } from 'next/server';

export async function GET(request: NextRequest) {
  const requestUrl = new URL(request.url);
  const code = requestUrl.searchParams.get('code');
  const error = requestUrl.searchParams.get('error');
  const errorDescription = requestUrl.searchParams.get('error_description');
  
  // Handle error case
  if (error) {
    console.error('Auth callback error:', error, errorDescription);
    return NextResponse.redirect(
      new URL(`/admin/auth/login?error=${encodeURIComponent(errorDescription || error)}`, request.url)
    );
  }
  
  if (code) {
    try {
      const supabase = await createServerSupabaseClient();
      
      // Exchange the code for a session
      const { data, error: exchangeError } = await supabase.auth.exchangeCodeForSession(code);
      
      if (exchangeError) {
        console.error('Error exchanging code for session:', exchangeError);
        return NextResponse.redirect(
          new URL(`/admin/auth/login?error=${encodeURIComponent(exchangeError.message)}`, request.url)
        );
      }
      
      // Get the user from the session
      const { data: { session }, error: sessionError } = await supabase.auth.getSession();
      
      if (sessionError) {
        console.error('Error getting session:', sessionError);
        return NextResponse.redirect(
          new URL(`/admin/auth/login?error=${encodeURIComponent(sessionError.message)}`, request.url)
        );
      }
      
      if (session) {
        // Check if the user is already in the admin_users table
        const { data: existingAdmin, error: adminError } = await supabase
          .from('admin_users')
          .select('*')
          .eq('user_id', session.user.id)
          .single();
        
        if (adminError && adminError.code !== 'PGRST116') { // PGRST116 is "no rows returned"
          console.error('Error checking admin status:', adminError);
        }
        
        if (!existingAdmin) {
          // Add the user to the admin_users table with pending status
          const { error: insertError } = await supabase
            .from('admin_users')
            .insert([{
              user_id: session.user.id,
              email: session.user.email,
              role: 'pending', // Default to pending until approved
            }]);
            
          if (insertError) {
            console.error('Error adding user to admin_users:', insertError);
          }
        }
        
        // Redirect to the dashboard or a pending approval page
        if (existingAdmin && existingAdmin.role !== 'pending') {
          return NextResponse.redirect(new URL('/admin/dashboard', request.url));
        } else {
          return NextResponse.redirect(new URL('/admin/auth/pending', request.url));
        }
      }
    } catch (error) {
      console.error('Unexpected error in auth callback:', error);
      return NextResponse.redirect(
        new URL(`/admin/auth/login?error=${encodeURIComponent('An unexpected error occurred')}`, request.url)
      );
    }
  }
  
  // If there's no code or session, redirect to login
  return NextResponse.redirect(new URL('/admin/auth/login', request.url));
}
